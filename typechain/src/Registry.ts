/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface RegistryInterface extends utils.Interface {
  functions: {
    "chambers(address)": FunctionFragment;
    "create(address,address,uint8,uint8)": FunctionFragment;
    "deployers(address,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "chambers" | "create" | "deployers" | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "chambers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployers",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "chambers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "ChamberCreated(address,address,address,address,uint8,uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChamberCreated"): EventFragment;
}

export interface ChamberCreatedEventObject {
  chamber: string;
  deployer: string;
  govToken: string;
  memberToken: string;
  leaders: number;
  quorum: number;
  version: number;
}
export type ChamberCreatedEvent = TypedEvent<
  [string, string, string, string, number, number, number],
  ChamberCreatedEventObject
>;

export type ChamberCreatedEventFilter = TypedEventFilter<ChamberCreatedEvent>;

export interface Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chambers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number] & {
        chamber: string;
        govToken: string;
        memberToken: string;
        version: number;
      }
    >;

    create(
      _govToken: PromiseOrValue<string>,
      _memberToken: PromiseOrValue<string>,
      _leaders: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number] & {
        chamber: string;
        govToken: string;
        memberToken: string;
        version: number;
      }
    >;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  chambers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number] & {
      chamber: string;
      govToken: string;
      memberToken: string;
      version: number;
    }
  >;

  create(
    _govToken: PromiseOrValue<string>,
    _memberToken: PromiseOrValue<string>,
    _leaders: PromiseOrValue<BigNumberish>,
    _quorum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployers(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number] & {
      chamber: string;
      govToken: string;
      memberToken: string;
      version: number;
    }
  >;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    chambers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number] & {
        chamber: string;
        govToken: string;
        memberToken: string;
        version: number;
      }
    >;

    create(
      _govToken: PromiseOrValue<string>,
      _memberToken: PromiseOrValue<string>,
      _leaders: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number] & {
        chamber: string;
        govToken: string;
        memberToken: string;
        version: number;
      }
    >;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "ChamberCreated(address,address,address,address,uint8,uint8,uint8)"(
      chamber?: PromiseOrValue<string> | null,
      deployer?: PromiseOrValue<string> | null,
      govToken?: null,
      memberToken?: null,
      leaders?: null,
      quorum?: null,
      version?: null
    ): ChamberCreatedEventFilter;
    ChamberCreated(
      chamber?: PromiseOrValue<string> | null,
      deployer?: PromiseOrValue<string> | null,
      govToken?: null,
      memberToken?: null,
      leaders?: null,
      quorum?: null,
      version?: null
    ): ChamberCreatedEventFilter;
  };

  estimateGas: {
    chambers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      _govToken: PromiseOrValue<string>,
      _memberToken: PromiseOrValue<string>,
      _leaders: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    chambers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      _govToken: PromiseOrValue<string>,
      _memberToken: PromiseOrValue<string>,
      _leaders: PromiseOrValue<BigNumberish>,
      _quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
